{"ast":null,"code":"var _jsxFileName = \"/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\n\n// Utility: convert a date (e.g. \"2025-04-10\") to the day of the year (1..365)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction dateToDayOfYear(dateString) {\n  const dateObj = new Date(dateString);\n  const start = new Date(dateObj.getFullYear(), 0, 0);\n  const diff = dateObj - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\nfunction App() {\n  _s();\n  const [selectedLocation, setSelectedLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Called when the user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({\n      lat,\n      lon\n    });\n  };\n\n  /**\n   * Called by ForecastForm:\n   * params = {\n   *   forecastDate: <string YYYY-MM-DD>,\n   *   forecastRange: 7 or 14 or 30,\n   *   temperature: boolean,\n   *   wind: boolean,\n   *   rain: boolean,\n   *   moisture: boolean\n   * }\n   */\n  const getForecast = async params => {\n    const {\n      forecastDate,\n      forecastRange,\n      temperature,\n      wind,\n      rain,\n      moisture\n    } = params;\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n\n    // Convert the chosen date to day-of-year\n    const dayOfYear = dateToDayOfYear(forecastDate);\n\n    // Build query parameters\n    const queryParams = new URLSearchParams({\n      lat: selectedLocation.lat,\n      lon: selectedLocation.lon,\n      startDay: dayOfYear,\n      range: forecastRange,\n      temp: temperature ? '1' : '0',\n      wind: wind ? '1' : '0',\n      rain: rain ? '1' : '0',\n      moisture: moisture ? '1' : '0'\n    });\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/weather?${queryParams.toString()}`);\n      const data = await response.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Augment with the chosen date so we can display it\n        data.chosenDate = forecastDate;\n        setForecastData(data);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card forecast-form\",\n        children: /*#__PURE__*/_jsxDEV(ForecastForm, {\n          onGetForecast: getForecast,\n          onLocationSelect: handleLocationSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapComponent, {\n          onLocationSelect: handleLocationSelect,\n          selectedLocation: selectedLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(ForecastResult, {\n          forecastData: forecastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"q2UWC+OGBDKjI4hSxBKFmtHuK78=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","NavBar","Footer","MapComponent","ForecastForm","ForecastResult","jsxDEV","_jsxDEV","dateToDayOfYear","dateString","dateObj","Date","start","getFullYear","diff","oneDay","Math","floor","App","_s","selectedLocation","setSelectedLocation","lat","lon","forecastData","setForecastData","handleLocationSelect","getForecast","params","forecastDate","forecastRange","temperature","wind","rain","moisture","alert","dayOfYear","queryParams","URLSearchParams","startDay","range","temp","response","fetch","toString","data","json","error","chosenDate","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGetForecast","onLocationSelect","_c","$RefreshReg$"],"sources":["/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\n\n// Utility: convert a date (e.g. \"2025-04-10\") to the day of the year (1..365)\nfunction dateToDayOfYear(dateString) {\n  const dateObj = new Date(dateString);\n  const start = new Date(dateObj.getFullYear(), 0, 0);\n  const diff = dateObj - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\n\nfunction App() {\n  const [selectedLocation, setSelectedLocation] = useState({ lat: null, lon: null });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Called when the user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({ lat, lon });\n  };\n\n  /**\n   * Called by ForecastForm:\n   * params = {\n   *   forecastDate: <string YYYY-MM-DD>,\n   *   forecastRange: 7 or 14 or 30,\n   *   temperature: boolean,\n   *   wind: boolean,\n   *   rain: boolean,\n   *   moisture: boolean\n   * }\n   */\n  const getForecast = async (params) => {\n    const { forecastDate, forecastRange, temperature, wind, rain, moisture } = params;\n\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n\n    // Convert the chosen date to day-of-year\n    const dayOfYear = dateToDayOfYear(forecastDate);\n\n    // Build query parameters\n    const queryParams = new URLSearchParams({\n      lat: selectedLocation.lat,\n      lon: selectedLocation.lon,\n      startDay: dayOfYear,\n      range: forecastRange,\n      temp: temperature ? '1' : '0',\n      wind: wind ? '1' : '0',\n      rain: rain ? '1' : '0',\n      moisture: moisture ? '1' : '0',\n    });\n\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/weather?${queryParams.toString()}`);\n      const data = await response.json();\n\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Augment with the chosen date so we can display it\n        data.chosenDate = forecastDate;\n        setForecastData(data);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* NAV BAR */}\n      <NavBar />\n\n      <div className=\"container\">\n        {/* Forecast form card */}\n        <div className=\"card forecast-form\">\n          <ForecastForm\n            onGetForecast={getForecast}\n            onLocationSelect={handleLocationSelect}\n          />\n        </div>\n\n        {/* Map section card */}\n        <div className=\"card map-section\">\n          <MapComponent\n            onLocationSelect={handleLocationSelect}\n            selectedLocation={selectedLocation}\n          />\n        </div>\n\n        {/* Forecast result card */}\n        <div className=\"card\">\n          <ForecastResult forecastData={forecastData} />\n        </div>\n      </div>\n\n      {/* FOOTER */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}