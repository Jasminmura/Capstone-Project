{"ast":null,"code":"var _jsxFileName = \"/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedLocation, setSelectedLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Utility: convert a date (e.g. \"2025-04-10\") to the day of the year (1..365)\n  const dateToDayOfYear = dateString => {\n    if (!dateString) return null; // if no date selected\n    const dateObj = new Date(dateString);\n    // Calculate day of year\n    // Explanation: start is Jan 1, same year\n    const start = new Date(dateObj.getFullYear(), 0, 0);\n    const diff = dateObj - start;\n    const oneDay = 1000 * 60 * 60 * 24;\n    const dayOfYear = Math.floor(diff / oneDay);\n    return dayOfYear;\n  };\n\n  // Called when the user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({\n      lat,\n      lon\n    });\n  };\n\n  // Fetches the forecast from the Flask backend (on port 8000) and uses day-of-year\n  const getForecast = async (customization, selectedDate) => {\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n\n    // Convert the user-chosen date to day-of-year\n    let dayOfYear = dateToDayOfYear(selectedDate);\n    // Optionally handle if user didn't choose a date\n    if (!dayOfYear) {\n      alert(\"Please pick a valid date.\");\n      return;\n    }\n    try {\n      // Call your Flask endpoint with lat, lon, and day\n      const response = await fetch(`http://127.0.0.1:8000/api/weather?lat=${selectedLocation.lat}&lon=${selectedLocation.lon}&day=${dayOfYear}`);\n      const data = await response.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Optionally embed customization/date into data\n        const augmentedData = {\n          ...data,\n          customization,\n          forecastDate: selectedDate // keep the raw date string for display\n        };\n        setForecastData(augmentedData);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card forecast-form\",\n        children: /*#__PURE__*/_jsxDEV(ForecastForm, {\n          onGetForecast: getForecast,\n          onLocationSelect: handleLocationSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapComponent, {\n          onLocationSelect: handleLocationSelect,\n          selectedLocation: selectedLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(ForecastResult, {\n          forecastData: forecastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"q2UWC+OGBDKjI4hSxBKFmtHuK78=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","NavBar","Footer","MapComponent","ForecastForm","ForecastResult","jsxDEV","_jsxDEV","App","_s","selectedLocation","setSelectedLocation","lat","lon","forecastData","setForecastData","dateToDayOfYear","dateString","dateObj","Date","start","getFullYear","diff","oneDay","dayOfYear","Math","floor","handleLocationSelect","getForecast","customization","selectedDate","alert","response","fetch","data","json","error","augmentedData","forecastDate","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGetForecast","onLocationSelect","_c","$RefreshReg$"],"sources":["/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\n\nfunction App() {\n  const [selectedLocation, setSelectedLocation] = useState({ lat: null, lon: null });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Utility: convert a date (e.g. \"2025-04-10\") to the day of the year (1..365)\n  const dateToDayOfYear = (dateString) => {\n    if (!dateString) return null; // if no date selected\n    const dateObj = new Date(dateString);\n    // Calculate day of year\n    // Explanation: start is Jan 1, same year\n    const start = new Date(dateObj.getFullYear(), 0, 0);\n    const diff = dateObj - start;\n    const oneDay = 1000 * 60 * 60 * 24;\n    const dayOfYear = Math.floor(diff / oneDay);\n    return dayOfYear;\n  };\n\n  // Called when the user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({ lat, lon });\n  };\n\n  // Fetches the forecast from the Flask backend (on port 8000) and uses day-of-year\n  const getForecast = async (customization, selectedDate) => {\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n\n    // Convert the user-chosen date to day-of-year\n    let dayOfYear = dateToDayOfYear(selectedDate);\n    // Optionally handle if user didn't choose a date\n    if (!dayOfYear) {\n      alert(\"Please pick a valid date.\");\n      return;\n    }\n\n    try {\n      // Call your Flask endpoint with lat, lon, and day\n      const response = await fetch(\n        `http://127.0.0.1:8000/api/weather?lat=${selectedLocation.lat}&lon=${selectedLocation.lon}&day=${dayOfYear}`\n      );\n      const data = await response.json();\n\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Optionally embed customization/date into data\n        const augmentedData = {\n          ...data,\n          customization,\n          forecastDate: selectedDate,  // keep the raw date string for display\n        };\n        setForecastData(augmentedData);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Navigation Bar */}\n      <NavBar />\n\n      <div className=\"container\">\n        {/* Forecast form card */}\n        <div className=\"card forecast-form\">\n          {/*\n            ForecastForm will collect:\n            1) chosen date => pass as 'selectedDate'\n            2) customization => pass as 'customization'\n            and call onGetForecast(...) with those values\n          */}\n          <ForecastForm\n            onGetForecast={getForecast}\n            onLocationSelect={handleLocationSelect}\n          />\n        </div>\n\n        {/* Map section card */}\n        <div className=\"card map-section\">\n          <MapComponent\n            onLocationSelect={handleLocationSelect}\n            selectedLocation={selectedLocation}\n          />\n        </div>\n\n        {/* Forecast result card */}\n        <div className=\"card\">\n          <ForecastResult forecastData={forecastData} />\n        </div>\n      </div>\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}