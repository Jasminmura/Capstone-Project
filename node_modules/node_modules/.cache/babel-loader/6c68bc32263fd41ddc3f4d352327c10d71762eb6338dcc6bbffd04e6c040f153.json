{"ast":null,"code":"var _jsxFileName = \"/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\nimport AboutPage from './components/AboutPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction dateToDayOfYear(dateString) {\n  const dateObj = new Date(dateString);\n  const start = new Date(dateObj.getFullYear(), 0, 0);\n  const diff = dateObj - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\nfunction App() {\n  _s();\n  const [selectedLocation, setSelectedLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Track theme: true => dark mode, false => light/pink mode\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  // Toggle function for NavBar\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({\n      lat,\n      lon\n    });\n  };\n  const getForecast = async params => {\n    const {\n      forecastDate,\n      forecastRange,\n      temperature,\n      wind,\n      rain,\n      moisture\n    } = params;\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n    const dayOfYear = dateToDayOfYear(forecastDate);\n    const queryParams = new URLSearchParams({\n      lat: selectedLocation.lat,\n      lon: selectedLocation.lon,\n      startDay: dayOfYear,\n      range: forecastRange,\n      temp: temperature ? '1' : '0',\n      wind: wind ? '1' : '0',\n      rain: rain ? '1' : '0',\n      moisture: moisture ? '1' : '0'\n    });\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/weather?${queryParams.toString()}`);\n      const data = await response.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        data.chosenDate = forecastDate;\n        setForecastData(data);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app-container ${isDarkMode ? 'dark-mode' : 'light-mode'}`,\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        isDarkMode: isDarkMode,\n        toggleTheme: toggleTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container my-4\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ForecastForm, {\n                onGetForecast: getForecast,\n                onLocationSelect: handleLocationSelect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n                onLocationSelect: handleLocationSelect,\n                selectedLocation: selectedLocation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ForecastResult, {\n                forecastData: forecastData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/about\",\n            element: /*#__PURE__*/_jsxDEV(AboutPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GBVUmCDGjtFiyD+gZWakIe6FZyE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","NavBar","Footer","MapComponent","ForecastForm","ForecastResult","AboutPage","jsxDEV","_jsxDEV","Fragment","_Fragment","dateToDayOfYear","dateString","dateObj","Date","start","getFullYear","diff","oneDay","Math","floor","App","_s","selectedLocation","setSelectedLocation","lat","lon","forecastData","setForecastData","isDarkMode","setIsDarkMode","toggleTheme","prev","handleLocationSelect","getForecast","params","forecastDate","forecastRange","temperature","wind","rain","moisture","alert","dayOfYear","queryParams","URLSearchParams","startDay","range","temp","response","fetch","toString","data","json","error","chosenDate","err","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onGetForecast","onLocationSelect","_c","$RefreshReg$"],"sources":["/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\nimport AboutPage from './components/AboutPage';\n\nfunction dateToDayOfYear(dateString) {\n  const dateObj = new Date(dateString);\n  const start = new Date(dateObj.getFullYear(), 0, 0);\n  const diff = dateObj - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\n\nfunction App() {\n  const [selectedLocation, setSelectedLocation] = useState({ lat: null, lon: null });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Track theme: true => dark mode, false => light/pink mode\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  // Toggle function for NavBar\n  const toggleTheme = () => {\n    setIsDarkMode((prev) => !prev);\n  };\n\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({ lat, lon });\n  };\n\n  const getForecast = async (params) => {\n    const { forecastDate, forecastRange, temperature, wind, rain, moisture } = params;\n\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or via city name first.\");\n      return;\n    }\n\n    const dayOfYear = dateToDayOfYear(forecastDate);\n\n    const queryParams = new URLSearchParams({\n      lat: selectedLocation.lat,\n      lon: selectedLocation.lon,\n      startDay: dayOfYear,\n      range: forecastRange,\n      temp: temperature ? '1' : '0',\n      wind: wind ? '1' : '0',\n      rain: rain ? '1' : '0',\n      moisture: moisture ? '1' : '0',\n    });\n\n    try {\n      const response = await fetch(\n        `http://127.0.0.1:8000/api/weather?${queryParams.toString()}`\n      );\n      const data = await response.json();\n\n      if (data.error) {\n        alert(data.error);\n      } else {\n        data.chosenDate = forecastDate;\n        setForecastData(data);\n      }\n    } catch (err) {\n      console.error('Error fetching data from backend:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n\n  return (\n    <Router>\n      {/* Dynamically set className: 'dark-mode' or 'light-mode' */}\n      <div className={`app-container ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n        {/* Pass toggleTheme and isDarkMode to NavBar so it can show a toggle button */}\n        <NavBar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n\n        <div className=\"container my-4\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <>\n                  <ForecastForm\n                    onGetForecast={getForecast}\n                    onLocationSelect={handleLocationSelect}\n                  />\n                  <MapComponent\n                    onLocationSelect={handleLocationSelect}\n                    selectedLocation={selectedLocation}\n                  />\n                  <ForecastResult forecastData={forecastData} />\n                </>\n              }\n            />\n            <Route path=\"/about\" element={<AboutPage />} />\n          </Routes>\n        </div>\n\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}