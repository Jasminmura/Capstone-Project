{"ast":null,"code":"var _jsxFileName = \"/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedLocation, setSelectedLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Called when user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({\n      lat,\n      lon\n    });\n  };\n\n  // Fetches the forecast from the Flask backend on port 8000\n  const getForecast = async (customization, date) => {\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or enter a valid city name first.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/weather?lat=${selectedLocation.lat}&lon=${selectedLocation.lon}`);\n      const data = await response.json();\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Add optional customization/date info\n        const augmentedData = {\n          ...data,\n          customization,\n          forecastDate: date\n        };\n        setForecastData(augmentedData);\n      }\n    } catch (err) {\n      console.error('Error fetching forecast:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ForecastForm, {\n        onGetForecast: getForecast,\n        onLocationSelect: handleLocationSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n        onLocationSelect: handleLocationSelect,\n        selectedLocation: selectedLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForecastResult, {\n        forecastData: forecastData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"q2UWC+OGBDKjI4hSxBKFmtHuK78=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapComponent","ForecastForm","ForecastResult","jsxDEV","_jsxDEV","App","_s","selectedLocation","setSelectedLocation","lat","lon","forecastData","setForecastData","handleLocationSelect","getForecast","customization","date","alert","response","fetch","data","json","error","augmentedData","forecastDate","err","console","className","children","onGetForecast","onLocationSelect","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbookairm2/Desktop/Fozz/WeatherGuide/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport MapComponent from './components/MapComponent';\nimport ForecastForm from './components/ForecastForm';\nimport ForecastResult from './components/ForecastResult';\n\nfunction App() {\n  const [selectedLocation, setSelectedLocation] = useState({ lat: null, lon: null });\n  const [forecastData, setForecastData] = useState(null);\n\n  // Called when user selects a point on the map\n  const handleLocationSelect = (lat, lon) => {\n    setSelectedLocation({ lat, lon });\n  };\n\n  // Fetches the forecast from the Flask backend on port 8000\n  const getForecast = async (customization, date) => {\n    if (!selectedLocation.lat || !selectedLocation.lon) {\n      alert(\"Please select a location on the map or enter a valid city name first.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `http://127.0.0.1:8000/api/weather?lat=${selectedLocation.lat}&lon=${selectedLocation.lon}`\n      );\n      const data = await response.json();\n\n      if (data.error) {\n        alert(data.error);\n      } else {\n        // Add optional customization/date info\n        const augmentedData = {\n          ...data,\n          customization,\n          forecastDate: date,\n        };\n        setForecastData(augmentedData);\n      }\n    } catch (err) {\n      console.error('Error fetching forecast:', err);\n      alert('Error fetching data from backend.');\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"container\">\n        <ForecastForm \n          onGetForecast={getForecast} \n          onLocationSelect={handleLocationSelect}\n        />\n        <MapComponent \n          onLocationSelect={handleLocationSelect}\n          selectedLocation={selectedLocation}\n        />\n        <ForecastResult forecastData={forecastData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAElB,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC;IAAEU,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE;EAAK,CAAC,CAAC;EAClF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMc,oBAAoB,GAAGA,CAACJ,GAAG,EAAEC,GAAG,KAAK;IACzCF,mBAAmB,CAAC;MAAEC,GAAG;MAAEC;IAAI,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAMI,WAAW,GAAG,MAAAA,CAAOC,aAAa,EAAEC,IAAI,KAAK;IACjD,IAAI,CAACT,gBAAgB,CAACE,GAAG,IAAI,CAACF,gBAAgB,CAACG,GAAG,EAAE;MAClDO,KAAK,CAAC,uEAAuE,CAAC;MAC9E;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yCAAyCZ,gBAAgB,CAACE,GAAG,QAAQF,gBAAgB,CAACG,GAAG,EAC3F,CAAC;MACD,MAAMU,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,KAAK,EAAE;QACdL,KAAK,CAACG,IAAI,CAACE,KAAK,CAAC;MACnB,CAAC,MAAM;QACL;QACA,MAAMC,aAAa,GAAG;UACpB,GAAGH,IAAI;UACPL,aAAa;UACbS,YAAY,EAAER;QAChB,CAAC;QACDJ,eAAe,CAACW,aAAa,CAAC;MAChC;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEG,GAAG,CAAC;MAC9CR,KAAK,CAAC,mCAAmC,CAAC;IAC5C;EACF,CAAC;EAED,oBACEb,OAAA;IAAKuB,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BxB,OAAA;MAAKuB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBxB,OAAA,CAACH,YAAY;QACX4B,aAAa,EAAEf,WAAY;QAC3BgB,gBAAgB,EAAEjB;MAAqB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACF9B,OAAA,CAACJ,YAAY;QACX8B,gBAAgB,EAAEjB,oBAAqB;QACvCN,gBAAgB,EAAEA;MAAiB;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC,eACF9B,OAAA,CAACF,cAAc;QAACS,YAAY,EAAEA;MAAa;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CAtDQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}